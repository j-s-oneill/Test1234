using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;

namespace DataItemConversionTests
{
    [TestClass]
    public class DataItemConverterTests
    {
        // Test 1: Basic conversion test
        [TestMethod]
        public void TestConvertToDataItemV2_BasicConversion()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            Assert.AreEqual("abc123", newDataItemV2.Id, "ID mismatch");
            Assert.AreEqual("123", newDataItemV2.Header.Key, "Key mismatch");
            Assert.AreEqual("Spot", newDataItemV2.Header.DataType, "DataType mismatch");
            Assert.AreEqual("RealTime", newDataItemV2.Header.Label, "Label mismatch");
        }

        // Test 2: Check MD5 checksum of MetaData
        [TestMethod]
        public void TestConvertToDataItemV2_MD5Checksum()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            string expectedMd5 = ComputeMD5Checksum("SampleMetaData");
            Assert.AreEqual(expectedMd5, newDataItemV2.Header.MetaData, "MetaData MD5 checksum mismatch");
        }

        // Test 3: Test timestamp conversion
        [TestMethod]
        public void TestConvertToDataItemV2_TimestampConversion()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            Assert.AreEqual(1609459200, newDataItemV2.Header.ValidFrom.Seconds, "ValidFrom timestamp mismatch");
            Assert.AreEqual(1672444800, newDataItemV2.Header.Expiry.Seconds, "Expiry timestamp mismatch");
        }

        // Test 4: Ensure Payload is converted correctly
        [TestMethod]
        public void TestConvertToDataItemV2_PayloadConversion()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            Assert.IsNotNull(newDataItemV2.Payload, "Payload is null");
            Assert.IsInstanceOfType(newDataItemV2.Payload.Json, typeof(Struct), "Payload Json is not of type Struct");
        }

        // Test 5: Ensure Entitlements are copied correctly
        [TestMethod]
        public void TestConvertToDataItemV2_EntitlementsCopy()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            CollectionAssert.AreEqual(new List<string> { "entitlement1", "entitlement2" }, newDataItemV2.Header.Entitlements, "Entitlements mismatch");
        }

        // Test 6: Check ParentIds conversion
        [TestMethod]
        public void TestConvertToDataItemV2_ParentIdsConversion()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            Assert.AreEqual(2, newDataItemV2.ParentIds.Count, "ParentIds count mismatch");
            Assert.AreEqual("parentId1", newDataItemV2.ParentIds[0].Id, "First ParentId mismatch");
            Assert.AreEqual("parentId2", newDataItemV2.ParentIds[1].Id, "Second ParentId mismatch");
        }

        // Test 7: Empty DataItem Conversion
        [TestMethod]
        public void TestConvertToDataItemV2_EmptyDataItem()
        {
            // Arrange
            var emptyDataItem = new DataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(emptyDataItem);

            // Assert
            Assert.IsNotNull(newDataItemV2, "Converted DataItemV2 is null");
            Assert.IsNull(newDataItemV2.Header.Key, "Header Key should be null");
            Assert.AreEqual(0, newDataItemV2.ParentIds.Count, "ParentIds should be empty");
        }

        // Test 8: CorrelationIds conversion
        [TestMethod]
        public void TestConvertToDataItemV2_CorrelationIdsConversion()
        {
            // Arrange
            var oldDataItem = CreateSampleDataItem();

            // Act
            var newDataItemV2 = DataItemConverter.ConvertToDataItemV2(oldDataItem);

            // Assert
            CollectionAssert.AreEqual(new List<string> { "corrId1", "corrId2" }, newDataItemV2.Duplicates, "CorrelationIds mismatch");
        }

        // Helper method to create a sample DataItem for testing
        private DataItem CreateSampleDataItem()
        {
            return new DataItem
            {
                Header = new Header
                {
                    Key = "123",
                    DataType = "Spot",
                    Label = "RealTime",
                    MetaData = "SampleMetaData",
                    ValidFrom = 1609459200, // EPOCH time for Jan 1, 2021
                    Expiry = 1672444800, // EPOCH time for Jan 1, 2023
                    Entitlements = { "entitlement1", "entitlement2" }
                },
                Id = "abc123",
                Payload = new Payload
                {
                    Json = new Struct() // Simulating a valid Struct (JSON) in the Payload
                },
                ParentIds = { "parentId1", "parentId2" },
                DbRevision = 1.0,
                CorrelationIds = { "corrId1", "corrId2" }
            };
        }

        // Utility method to compute MD5 checksum (same as in the converter)
        private string ComputeMD5Checksum(string input)
        {
            using (var md5 = MD5.Create())
            {
                byte[] inputBytes = Encoding.UTF8.GetBytes(input);
                byte[] hashBytes = md5.ComputeHash(inputBytes);
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
            }
        }
    }
}
