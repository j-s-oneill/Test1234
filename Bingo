using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;

public class BusinessDayTimestampGenerator
{
    private static readonly TimeSpan StartTime = new TimeSpan(9, 0, 0); // 9:00 AM
    private static readonly TimeSpan EndTime = new TimeSpan(17, 0, 0);  // 5:00 PM
    private static readonly Random RandomGenerator = new Random();

    private static DateTime currentDate;
    private static readonly object dateLock = new object(); // Lock to manage date progression

    private static Queue<DateTime> timestampQueue = new Queue<DateTime>();

    // Initialize the current date to 2 years ago
    static BusinessDayTimestampGenerator()
    {
        currentDate = DateTime.Today.AddYears(-2);
    }

    // Method to generate timestamps for business days when the queue is empty
    private static void GenerateTimestampsIfQueueIsEmpty(int countPerDay)
    {
        lock (dateLock)
        {
            if (timestampQueue.Count == 0)
            {
                for (; currentDate <= DateTime.Today; currentDate = currentDate.AddDays(1))
                {
                    if (IsBusinessDay(currentDate))
                    {
                        // Generate 500 timestamps for the current business day
                        for (int i = 0; i < countPerDay; i++)
                        {
                            DateTime randomTime = GetRandomTimeOnDay(currentDate);
                            timestampQueue.Enqueue(randomTime);
                        }

                        currentDate = currentDate.AddDays(1); // Move to the next day after generating
                        break; // Stop generating once we have 500 timestamps
                    }
                }
            }
        }
    }

    // Method to take a timestamp from the queue
    public static DateTime? Take(int countPerDay)
    {
        GenerateTimestampsIfQueueIsEmpty(countPerDay);

        if (timestampQueue.Count > 0)
        {
            return timestampQueue.Dequeue();
        }
        else
        {
            return null; // No more dates left to generate
        }
    }

    // Method to get a random time between 9 AM and 5 PM on a given business day
    private static DateTime GetRandomTimeOnDay(DateTime day)
    {
        int totalSecondsInRange = (int)(EndTime - StartTime).TotalSeconds;
        int randomSeconds = RandomGenerator.Next(totalSecondsInRange);

        TimeSpan randomTime = StartTime.Add(TimeSpan.FromSeconds(randomSeconds));
        return day.Date + randomTime; // Combine the date and time
    }

    // Method to check if a date is a business day (Monday to Friday)
    private static bool IsBusinessDay(DateTime date)
    {
        return date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday;
    }
}




###



using NUnit.Framework;
using System;
using System.Linq;
using System.Collections.Generic;

[TestFixture]
public class BusinessDayTimestampGeneratorTests
{
    [SetUp]
    public void Setup()
    {
        // Reset state or prepare things before each test
    }

    [Test]
    public void TestTakeMethodGenerates500Timestamps()
    {
        // Act
        var timestamps = new List<DateTime?>();
        for (int i = 0; i < 500; i++)
        {
            timestamps.Add(BusinessDayTimestampGenerator.Take(500));
        }

        // Assert
        Assert.AreEqual(500, timestamps.Count, "Expected 500 timestamps.");
        Assert.IsTrue(timestamps.All(t => t.HasValue), "All timestamps should have values.");
    }

    [Test]
    public void TestQueueIsRefilledAfter500Timestamps()
    {
        // Act
        var firstSet = new List<DateTime?>();
        for (int i = 0; i < 500; i++)
        {
            firstSet.Add(BusinessDayTimestampGenerator.Take(500));
        }

        var secondSet = new List<DateTime?>();
        for (int i = 0; i < 500; i++)
        {
            secondSet.Add(BusinessDayTimestampGenerator.Take(500));
        }

        // Assert
        Assert.AreEqual(500, secondSet.Count, "Expected the queue to be refilled after the first 500 timestamps.");
        Assert.IsTrue(secondSet.All(t => t.HasValue), "All second set timestamps should have values.");
    }

    [Test]
    public void TestTimestampsAreOnBusinessDays()
    {
        // Act
        var timestamps = new List<DateTime?>();
        for (int i = 0; i < 500; i++)
        {
            timestamps.Add(BusinessDayTimestampGenerator.Take(500));
        }

        // Assert
        foreach (var timestamp in timestamps)
        {
            Assert.IsNotNull(timestamp);
            Assert.IsTrue(IsBusinessDay(timestamp.Value), $"Timestamp {timestamp.Value} is not a business day.");
        }
    }

    [Test]
    public void TestTimestampsAreWithinBusinessHours()
    {
        // Act
        var timestamps = new List<DateTime?>();
        for (int i = 0; i < 500; i++)
        {
            timestamps.Add(BusinessDayTimestampGenerator.Take(500));
        }

        // Assert
        TimeSpan startTime = new TimeSpan(9, 0, 0);  // 9:00 AM
        TimeSpan endTime = new TimeSpan(17, 0, 0);   // 5:00 PM

        foreach (var timestamp in timestamps)
        {
            var timeOfDay = timestamp.Value.TimeOfDay;
            Assert.IsTrue(timeOfDay >= startTime && timeOfDay <= endTime,
                          $"Timestamp {timestamp.Value} is outside business hours.");
        }
    }

    [Test]
    public void TestReturnNullWhenAllDatesAreExhausted()
    {
        // Exhaust all dates by repeatedly calling Take
        DateTime? timestamp;
        do
        {
            timestamp = BusinessDayTimestampGenerator.Take(500);
        } while (timestamp != null);

        // Act
        var result = BusinessDayTimestampGenerator.Take(500);

        // Assert
        Assert.IsNull(result, "The generator should return null when all dates are exhausted.");
    }

    private bool IsBusinessDay(DateTime date)
    {
        return date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday;
    }
}
