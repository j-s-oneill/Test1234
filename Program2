using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main(string[] args)
    {
        await JsonUpdaterService.Run(args);
    }
}


using System;
using System.Collections.Concurrent;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Consumer;
using Azure.Messaging.EventHubs.Producer;
using Newtonsoft.Json.Linq;

public static class JsonUpdaterService
{
    public static async Task Run(string[] args)
    {
        // Example usage
        string filePath = "path/to/your/jsonfile.json";
        string key1 = "newKey1";
        string value1 = "newValue1";
        string key2 = "newKey2";
        string value2 = "newValue2";
        string key3 = "newKey3";
        string value3 = "newValue3";

        // Optionally generate a JSON file
        if (args.Length > 0 && args[0] == "generate")
        {
            GenerateJsonFile(filePath);
            Console.WriteLine($"Generated JSON file at {filePath}");
        }
        else
        {
            // Single update
            JObject updatedJson = UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);
            Console.WriteLine(updatedJson.ToString());

            // Multiple updates
            UpdateJsonFileMultipleTimes(filePath, key1, value1, key2, value2, key3, value3, 1000);

            // Publish to Event Hub in batch mode
            string eventHubConnectionString = "Endpoint=sb://your-event-hub-namespace.servicebus.windows.net/;SharedAccessKeyName=your-policy-name;SharedAccessKey=your-shared-access-key";
            string eventHubName = "your-event-hub-name";

            EventHubProducerClient producerClient = new EventHubProducerClient(eventHubConnectionString, eventHubName);
            await PublishJsonToEventHubAsync(producerClient, updatedJson);

            // Publish to Event Hub one message at a time
            await PublishSingleJsonToEventHubAsync(producerClient, updatedJson);

            // Consume messages from Event Hub
            string consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName; // "$Default"
            EventHubConsumerClient consumerClient = new EventHubConsumerClient(consumerGroup, eventHubConnectionString, eventHubName);
            JObject[] receivedMessages = await ConsumeMessagesFromEventHubAsync(consumerClient);

            foreach (var message in receivedMessages)
            {
                Console.WriteLine($"Consumed message: {message}");
            }
        }
    }

    public static void GenerateJsonFile(string filePath)
    {
        JObject jsonObject = new JObject
        {
            ["key1"] = "value1",
            ["key2"] = "value2",
            ["key3"] = "value3"
        };

        File.WriteAllText(filePath, jsonObject.ToString());
    }

    public static JObject UpdateJsonFile(string filePath, string key1, string value1, string key2, string value2, string key3, string value3)
    {
        JObject jsonObject;

        // Read the existing JSON file or create a new one
        if (File.Exists(filePath))
        {
            string jsonContent = File.ReadAllText(filePath);
            jsonObject = JObject.Parse(jsonContent);
        }
        else
        {
            jsonObject = new JObject();
        }

        // Update or add the specified keys with the new values
        jsonObject[key1] = value1;
        jsonObject[key2] = value2;
        jsonObject[key3] = value3;

        // Write the updated JSON back to the file
        File.WriteAllText(filePath, jsonObject.ToString());

        // Return the updated JObject
        return jsonObject;
    }

    public static void UpdateJsonFileMultipleTimes(string filePath, string key1, string value1, string key2, string value2, string key3, string value3, int iterations)
    {
        for (int i = 0; i < iterations; i++)
        {
            UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);
        }

        Console.WriteLine($"Updated JSON file {iterations} times.");
    }

    public static async Task PublishJsonToEventHubAsync(EventHubProducerClient producerClient, JObject jsonObject)
    {
        // Create a batch of events
        using EventDataBatch eventBatch = await producerClient.CreateBatchAsync();

        // Add an event to the batch. An event is a represented by a collection of bytes and metadata.
        var eventData = new EventData(Encoding.UTF8.GetBytes(jsonObject.ToString()));
        if (!eventBatch.TryAdd(eventData))
        {
            throw new Exception("The event is too large for the batch and cannot be sent.");
        }

        // Send the batch of events to the event hub
        await producerClient.SendAsync(eventBatch);

        Console.WriteLine("Published JSON to Event Hub in batch mode.");
    }

    public static async Task PublishSingleJsonToEventHubAsync(EventHubProducerClient producerClient, JObject jsonObject)
    {
        // Create an event
        var eventData = new EventData(Encoding.UTF8.GetBytes(jsonObject.ToString()));

        // Send the event to the event hub
        await producerClient.SendAsync(new[] { eventData });

        Console.WriteLine("Published JSON to Event Hub one message at a time.");
    }

    public static async Task<JObject[]> ConsumeMessagesFromEventHubAsync(EventHubConsumerClient consumerClient)
    {
        var messages = new ConcurrentBag<JObject>();

        await foreach (PartitionEvent partitionEvent in consumerClient.ReadEventsAsync())
        {
            string messageBody = Encoding.UTF8.GetString(partitionEvent.Data.Body.ToArray());
            Console.WriteLine($"Message received: {messageBody}");

            // Process the message (for example, convert it back to a JObject if needed)
            JObject jsonMessage = JObject.Parse(messageBody);
            messages.Add(jsonMessage);
        }

        return messages.ToArray();
    }
}



Certainly! We'll update the code to minimize the logic in the Main method by delegating the functionality to a separate class. Additionally, we'll create another file to act as a REST endpoint that will take a JSON string for the file and the key-value pairs.

Program.cs
This will contain the minimal Main method.

csharp
Copy code
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main(string[] args)
    {
        await JsonUpdaterService.Run(args);
    }
}
JsonUpdaterService.cs
This file will contain the core logic that was previously in the Main method.

csharp
Copy code
using System;
using System.Collections.Concurrent;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Consumer;
using Azure.Messaging.EventHubs.Producer;
using Newtonsoft.Json.Linq;

public static class JsonUpdaterService
{
    public static async Task Run(string[] args)
    {
        // Example usage
        string filePath = "path/to/your/jsonfile.json";
        string key1 = "newKey1";
        string value1 = "newValue1";
        string key2 = "newKey2";
        string value2 = "newValue2";
        string key3 = "newKey3";
        string value3 = "newValue3";

        // Optionally generate a JSON file
        if (args.Length > 0 && args[0] == "generate")
        {
            GenerateJsonFile(filePath);
            Console.WriteLine($"Generated JSON file at {filePath}");
        }
        else
        {
            // Single update
            JObject updatedJson = UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);
            Console.WriteLine(updatedJson.ToString());

            // Multiple updates
            UpdateJsonFileMultipleTimes(filePath, key1, value1, key2, value2, key3, value3, 1000);

            // Publish to Event Hub in batch mode
            string eventHubConnectionString = "Endpoint=sb://your-event-hub-namespace.servicebus.windows.net/;SharedAccessKeyName=your-policy-name;SharedAccessKey=your-shared-access-key";
            string eventHubName = "your-event-hub-name";

            EventHubProducerClient producerClient = new EventHubProducerClient(eventHubConnectionString, eventHubName);
            await PublishJsonToEventHubAsync(producerClient, updatedJson);

            // Publish to Event Hub one message at a time
            await PublishSingleJsonToEventHubAsync(producerClient, updatedJson);

            // Consume messages from Event Hub
            string consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName; // "$Default"
            EventHubConsumerClient consumerClient = new EventHubConsumerClient(consumerGroup, eventHubConnectionString, eventHubName);
            JObject[] receivedMessages = await ConsumeMessagesFromEventHubAsync(consumerClient);

            foreach (var message in receivedMessages)
            {
                Console.WriteLine($"Consumed message: {message}");
            }
        }
    }

    public static void GenerateJsonFile(string filePath)
    {
        JObject jsonObject = new JObject
        {
            ["key1"] = "value1",
            ["key2"] = "value2",
            ["key3"] = "value3"
        };

        File.WriteAllText(filePath, jsonObject.ToString());
    }

    public static JObject UpdateJsonFile(string filePath, string key1, string value1, string key2, string value2, string key3, string value3)
    {
        JObject jsonObject;

        // Read the existing JSON file or create a new one
        if (File.Exists(filePath))
        {
            string jsonContent = File.ReadAllText(filePath);
            jsonObject = JObject.Parse(jsonContent);
        }
        else
        {
            jsonObject = new JObject();
        }

        // Update or add the specified keys with the new values
        jsonObject[key1] = value1;
        jsonObject[key2] = value2;
        jsonObject[key3] = value3;

        // Write the updated JSON back to the file
        File.WriteAllText(filePath, jsonObject.ToString());

        // Return the updated JObject
        return jsonObject;
    }

    public static void UpdateJsonFileMultipleTimes(string filePath, string key1, string value1, string key2, string value2, string key3, string value3, int iterations)
    {
        for (int i = 0; i < iterations; i++)
        {
            UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);
        }

        Console.WriteLine($"Updated JSON file {iterations} times.");
    }

    public static async Task PublishJsonToEventHubAsync(EventHubProducerClient producerClient, JObject jsonObject)
    {
        // Create a batch of events
        using EventDataBatch eventBatch = await producerClient.CreateBatchAsync();

        // Add an event to the batch. An event is a represented by a collection of bytes and metadata.
        var eventData = new EventData(Encoding.UTF8.GetBytes(jsonObject.ToString()));
        if (!eventBatch.TryAdd(eventData))
        {
            throw new Exception("The event is too large for the batch and cannot be sent.");
        }

        // Send the batch of events to the event hub
        await producerClient.SendAsync(eventBatch);

        Console.WriteLine("Published JSON to Event Hub in batch mode.");
    }

    public static async Task PublishSingleJsonToEventHubAsync(EventHubProducerClient producerClient, JObject jsonObject)
    {
        // Create an event
        var eventData = new EventData(Encoding.UTF8.GetBytes(jsonObject.ToString()));

        // Send the event to the event hub
        await producerClient.SendAsync(new[] { eventData });

        Console.WriteLine("Published JSON to Event Hub one message at a time.");
    }

    public static async Task<JObject[]> ConsumeMessagesFromEventHubAsync(EventHubConsumerClient consumerClient)
    {
        var messages = new ConcurrentBag<JObject>();

        await foreach (PartitionEvent partitionEvent in consumerClient.ReadEventsAsync())
        {
            string messageBody = Encoding.UTF8.GetString(partitionEvent.Data.Body.ToArray());
            Console.WriteLine($"Message received: {messageBody}");

            // Process the message (for example, convert it back to a JObject if needed)
            JObject jsonMessage = JObject.Parse(messageBody);
            messages.Add(jsonMessage);
        }

        return messages.ToArray();
    }
}
Certainly! We'll update the code to minimize the logic in the Main method by delegating the functionality to a separate class. Additionally, we'll create another file to act as a REST endpoint that will take a JSON string for the file and the key-value pairs.

Program.cs
This will contain the minimal Main method.

csharp
Copy code
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main(string[] args)
    {
        await JsonUpdaterService.Run(args);
    }
}
JsonUpdaterService.cs
This file will contain the core logic that was previously in the Main method.

csharp
Copy code
using System;
using System.Collections.Concurrent;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Consumer;
using Azure.Messaging.EventHubs.Producer;
using Newtonsoft.Json.Linq;

public static class JsonUpdaterService
{
    public static async Task Run(string[] args)
    {
        // Example usage
        string filePath = "path/to/your/jsonfile.json";
        string key1 = "newKey1";
        string value1 = "newValue1";
        string key2 = "newKey2";
        string value2 = "newValue2";
        string key3 = "newKey3";
        string value3 = "newValue3";

        // Optionally generate a JSON file
        if (args.Length > 0 && args[0] == "generate")
        {
            GenerateJsonFile(filePath);
            Console.WriteLine($"Generated JSON file at {filePath}");
        }
        else
        {
            // Single update
            JObject updatedJson = UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);
            Console.WriteLine(updatedJson.ToString());

            // Multiple updates
            UpdateJsonFileMultipleTimes(filePath, key1, value1, key2, value2, key3, value3, 1000);

            // Publish to Event Hub in batch mode
            string eventHubConnectionString = "Endpoint=sb://your-event-hub-namespace.servicebus.windows.net/;SharedAccessKeyName=your-policy-name;SharedAccessKey=your-shared-access-key";
            string eventHubName = "your-event-hub-name";

            EventHubProducerClient producerClient = new EventHubProducerClient(eventHubConnectionString, eventHubName);
            await PublishJsonToEventHubAsync(producerClient, updatedJson);

            // Publish to Event Hub one message at a time
            await PublishSingleJsonToEventHubAsync(producerClient, updatedJson);

            // Consume messages from Event Hub
            string consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName; // "$Default"
            EventHubConsumerClient consumerClient = new EventHubConsumerClient(consumerGroup, eventHubConnectionString, eventHubName);
            JObject[] receivedMessages = await ConsumeMessagesFromEventHubAsync(consumerClient);

            foreach (var message in receivedMessages)
            {
                Console.WriteLine($"Consumed message: {message}");
            }
        }
    }

    public static void GenerateJsonFile(string filePath)
    {
        JObject jsonObject = new JObject
        {
            ["key1"] = "value1",
            ["key2"] = "value2",
            ["key3"] = "value3"
        };

        File.WriteAllText(filePath, jsonObject.ToString());
    }

    public static JObject UpdateJsonFile(string filePath, string key1, string value1, string key2, string value2, string key3, string value3)
    {
        JObject jsonObject;

        // Read the existing JSON file or create a new one
        if (File.Exists(filePath))
        {
            string jsonContent = File.ReadAllText(filePath);
            jsonObject = JObject.Parse(jsonContent);
        }
        else
        {
            jsonObject = new JObject();
        }

        // Update or add the specified keys with the new values
        jsonObject[key1] = value1;
        jsonObject[key2] = value2;
        jsonObject[key3] = value3;

        // Write the updated JSON back to the file
        File.WriteAllText(filePath, jsonObject.ToString());

        // Return the updated JObject
        return jsonObject;
    }

    public static void UpdateJsonFileMultipleTimes(string filePath, string key1, string value1, string key2, string value2, string key3, string value3, int iterations)
    {
        for (int i = 0; i < iterations; i++)
        {
            UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);
        }

        Console.WriteLine($"Updated JSON file {iterations} times.");
    }

    public static async Task PublishJsonToEventHubAsync(EventHubProducerClient producerClient, JObject jsonObject)
    {
        // Create a batch of events
        using EventDataBatch eventBatch = await producerClient.CreateBatchAsync();

        // Add an event to the batch. An event is a represented by a collection of bytes and metadata.
        var eventData = new EventData(Encoding.UTF8.GetBytes(jsonObject.ToString()));
        if (!eventBatch.TryAdd(eventData))
        {
            throw new Exception("The event is too large for the batch and cannot be sent.");
        }

        // Send the batch of events to the event hub
        await producerClient.SendAsync(eventBatch);

        Console.WriteLine("Published JSON to Event Hub in batch mode.");
    }

    public static async Task PublishSingleJsonToEventHubAsync(EventHubProducerClient producerClient, JObject jsonObject)
    {
        // Create an event
        var eventData = new EventData(Encoding.UTF8.GetBytes(jsonObject.ToString()));

        // Send the event to the event hub
        await producerClient.SendAsync(new[] { eventData });

        Console.WriteLine("Published JSON to Event Hub one message at a time.");
    }

    public static async Task<JObject[]> ConsumeMessagesFromEventHubAsync(EventHubConsumerClient consumerClient)
    {
        var messages = new ConcurrentBag<JObject>();

        await foreach (PartitionEvent partitionEvent in consumerClient.ReadEventsAsync())
        {
            string messageBody = Encoding.UTF8.GetString(partitionEvent.Data.Body.ToArray());
            Console.WriteLine($"Message received: {messageBody}");

            // Process the message (for example, convert it back to a JObject if needed)
            JObject jsonMessage = JObject.Parse(messageBody);
            messages.Add(jsonMessage);
        }

        return messages.ToArray();
    }
}
RestEndpoint.cs
This file will act as a REST endpoint that takes a JSON string for the file and key-value pairs.

First, ensure you have the necessary NuGet packages for ASP.NET Core:

sh
Copy code
dotnet add package Microsoft.AspNetCore.App
dotnet add package Microsoft.AspNetCore.Hosting
dotnet add package Microsoft.Extensions.Hosting
Next, create the RestEndpoint.cs file:

csharp
Copy code
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

public class RestEndpoint
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.ConfigureServices(services => { });
                webBuilder.Configure(app =>
                {
                    app.UseRouting();
                    app.UseEndpoints(endpoints =>
                    {
                        endpoints.MapPost("/update-json", async context =>
                        {
                            var requestBody = await new StreamReader(context.Request.Body).ReadToEndAsync();
                            var requestJson = JsonDocument.Parse(requestBody).RootElement;

                            string filePath = requestJson.GetProperty("filePath").GetString();
                            string key1 = requestJson.GetProperty("key1").GetString();
                            string value1 = requestJson.GetProperty("value1").GetString();
                            string key2 = requestJson.GetProperty("key2").GetString();
                            string value2 = requestJson.GetProperty("value2").GetString();
                            string key3 = requestJson.GetProperty("key3").GetString();
                            string value3 = requestJson.GetProperty("value3").GetString();

                            JObject updatedJson = JsonUpdaterService.UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);

                            context.Response.ContentType = "application/json";
                            await context.Response.WriteAsync(updatedJson.ToString());
                        });
                    });
                });
            });
}
RestEndpoint.cs
This file will act as a REST endpoint that takes a JSON string for the file and key-value pairs.

First, ensure you have the necessary NuGet packages for ASP.NET Core:

sh
Copy code
dotnet add package Microsoft.AspNetCore.App
dotnet add package Microsoft.AspNetCore.Hosting
dotnet add package Microsoft.Extensions.Hosting
Next, create the RestEndpoint.cs file:

csharp
Copy code
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

public class RestEndpoint
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.ConfigureServices(services => { });
                webBuilder.Configure(app =>
                {
                    app.UseRouting();
                    app.UseEndpoints(endpoints =>
                    {
                        endpoints.MapPost("/update-json", async context =>
                        {
                            var requestBody = await new StreamReader(context.Request.Body).ReadToEndAsync();
                            var requestJson = JsonDocument.Parse(requestBody).RootElement;

                            string filePath = requestJson.GetProperty("filePath").GetString();
                            string key1 = requestJson.GetProperty("key1").GetString();
                            string value1 = requestJson.GetProperty("value1").GetString();
                            string key2 = requestJson.GetProperty("key2").GetString();
                            string value2 = requestJson.GetProperty("value2").GetString();
                            string key3 = requestJson.GetProperty("key3").GetString();
                            string value3 = requestJson.GetProperty("value3").GetString();

                            JObject updatedJson = JsonUpdaterService.UpdateJsonFile(filePath, key1, value1, key2, value2, key3, value3);

                            context.Response.ContentType = "application/json";
                            await context.Response.WriteAsync(updatedJson.ToString());
                        });
                    });
                });
            });
}


############

<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
    <PackageReference Include="Azure.Messaging.EventHubs" Version="5.8.1" />
    <PackageReference Include="Azure.Messaging.EventHubs.Producer" Version="5.8.1" />
    <PackageReference Include="Azure.Messaging.EventHubs.Consumer" Version="5.8.1" />
    <PackageReference Include="Microsoft.AspNetCore.App" />
    <PackageReference Include="Microsoft.AspNetCore.Hosting" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="Moq" Version="4.18.2" />
    <PackageReference Include="NUnit" Version="3.13.3" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.2.0" />
  </ItemGroup>

</Project>


using System;
using System.Collections.Concurrent;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Consumer;
using Azure.Messaging.EventHubs.Producer;
using Moq;
using Newtonsoft.Json.Linq;
using NUnit.Framework;

public class JsonUpdaterServiceTests
{
    [Test]
    public async Task PublishAndConsumeJsonToEventHubTest()
    {
        // Arrange
        var eventHubName = "test-hub";
        var connectionString = "Endpoint=sb://test.servicebus.windows.net/;SharedAccessKeyName=test-key;SharedAccessKey=test-secret";
        var eventDataQueue = new ConcurrentQueue<EventData>();

        // Mock the EventHubProducerClient
        var mockProducerClient = new Mock<EventHubProducerClient>(MockBehavior.Strict, connectionString, eventHubName);
        mockProducerClient
            .Setup(p => p.CreateBatchAsync(It.IsAny<CancellationToken>()))
            .ReturnsAsync(() =>
            {
                var mockBatch = new Mock<EventDataBatch>(MockBehavior.Strict);
                mockBatch
                    .Setup(b => b.TryAdd(It.IsAny<EventData>()))
                    .Returns((EventData eventData) =>
                    {
                        eventDataQueue.Enqueue(eventData);
                        return true;
                    });
                mockBatch.Setup(b => b.Count).Returns(() => eventDataQueue.Count);
                return mockBatch.Object;
            });
        mockProducerClient
            .Setup(p => p.SendAsync(It.IsAny<EventDataBatch>(), It.IsAny<CancellationToken>()))
            .Returns(Task.CompletedTask);

        // Mock the EventHubConsumerClient
        var mockConsumerClient = new Mock<EventHubConsumerClient>(MockBehavior.Strict, EventHubConsumerClient.DefaultConsumerGroupName, connectionString, eventHubName);
        mockConsumerClient
            .Setup(c => c.ReadEventsAsync(It.IsAny<CancellationToken>()))
            .Returns(() => GetPartitionEventsAsync(eventDataQueue));

        // Act
        var jsonObject = new JObject { ["key"] = "value" };
        await JsonUpdaterService.PublishJsonToEventHubAsync(mockProducerClient.Object, jsonObject);

        var receivedMessages = await JsonUpdaterService.ConsumeMessagesFromEventHubAsync(mockConsumerClient.Object);

        // Assert
        Assert.AreEqual(1, receivedMessages.Length);
        Assert.AreEqual(jsonObject.ToString(), receivedMessages[0].ToString());
    }

    private async IAsyncEnumerable<PartitionEvent> GetPartitionEventsAsync(ConcurrentQueue<EventData> eventDataQueue)
    {
        while (!eventDataQueue.IsEmpty)
        {
            if (eventDataQueue.TryDequeue(out var eventData))
            {
                yield return new PartitionEvent(new PartitionContext("0"), eventData);
            }

            await Task.Delay(100); // Simulate delay
        }
    }
}


#######

using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.Hosting;
using Newtonsoft.Json.Linq;
using NUnit.Framework;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

public class RestEndpointTests
{
    private TestServer _server;
    private HttpClient _client;

    [SetUp]
    public void Setup()
    {
        _server = new TestServer(Program.CreateHostBuilder(new string[] { }));
        _client = _server.CreateClient();
    }

    [TearDown]
    public void TearDown()
    {
        _client.Dispose();
        _server.Dispose();
    }

    [Test]
    public async Task UpdateJsonEndpointTest()
    {
        // Arrange
        var requestJson = new JObject
        {
            ["filePath"] = "path/to/your/jsonfile.json",
            ["key1"] = "newKey1",
            ["value1"] = "newValue1",
            ["key2"] = "newKey2",
            ["value2"] = "newValue2",
            ["key3"] = "newKey3",
            ["value3"] = "newValue3"
        };

        var content = new StringContent(requestJson.ToString(), Encoding.UTF8, "application/json");

        // Act
        var response = await _client.PostAsync("/update-json", content);

        // Assert
        Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);

        var responseContent = await response.Content.ReadAsStringAsync();
        var responseJson = JObject.Parse(responseContent);

        Assert.AreEqual("newValue1", responseJson["newKey1"]);
        Assert.AreEqual("newValue2", responseJson["newKey2"]);
        Assert.AreEqual("newValue3", responseJson["newKey3"]);
    }
}
